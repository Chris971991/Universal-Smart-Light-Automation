
blueprint:
  name: Universal Smart Presence Lighting Control - Dynamic v4.0.0
  description: >
    # Universal Smart Presence Lighting Control - Dynamic Version 4.0.0
    
    Intelligently manages your lighting based on room occupancy, light levels, and manual controls.
    Works perfectly for ANY room - bedrooms, offices, living rooms, kitchens, bathrooms, etc.
    
    ## 🚀 NEW IN VERSION 4.0.0
    
    • **Dynamic Lighting** - Sun elevation-based natural lighting transitions
    • **Lux-Based Brightness** - Real-time brightness adjustment based on ambient light
    • **Night Light Mode** - Dedicated nighttime lighting with color support
    • **RGB/RGBW Support** - Full color control for compatible lights
    • **Dead Zone Control** - Prevents annoying micro-adjustments
    • **Preset Modes** - Easy setup with Basic, Natural, and Advanced modes
    
    ---
    
    ## 📄 Automatic Update Notifications (Optional)
    
    Get notified when new blueprint versions are available! To enable this feature:
    
    **Step 1:** Add this sensor to your configuration.yaml file:
    
    ```yaml
    sensor:
      - platform: rest
        name: "Universal Lighting Updates"
        resource: https://api.github.com/repos/Chris971991/universal-smart-light-automation/releases/latest
        value_template: >
          {{ '{{' }} value_json.tag_name | default('unknown') {{ '}}' }}
        scan_interval: 86400
    ```
    
    **Step 2:** Restart Home Assistant
    
    **Step 3:** Enable the "Check for Updates" option at the bottom of this configuration
    
    ## 🎯 UNIVERSAL DESIGN
    
    This single blueprint works for ALL room types:
    • **Bedrooms** - Full bed sensor integration with night light mode
    • **Living Areas** - Standard presence-based control with dynamic lighting
    • **Offices** - Productivity-focused lighting with sun elevation sync
    • **Any Room** - Fully customizable behavior
    
    ## REQUIRED HELPER ENTITIES

    Before using this blueprint, you MUST create these helper entities.
    
    **IMPORTANT**: All entity IDs must be lowercase! If your room name is "Office", 
    the helpers should use "office" (lowercase) in their entity IDs.
    
    1. `input_boolean.[room_name]_automation_active`
    2. `input_boolean.[room_name]_manual_override`
    3. `input_boolean.[room_name]_light_auto_on`
    4. `input_datetime.[room_name]_last_automation_action` (MUST have both date AND time enabled)
    5. `input_boolean.[room_name]_occupancy_state`
    6. `input_text.[room_name]_illuminance_history`
    7. `input_boolean.[room_name]_night_light_active` (NEW - for night light mode)
    8. `input_text.[room_name]_dynamic_mode` (NEW - for dynamic lighting state)
    
    Replace [room_name] with your actual room name in LOWERCASE (e.g., office, bedroom, living_room)

  domain: automation
  input:
    # Section 1: Room Setup
    room_setup:
      name: "Room Setup"
      icon: mdi:home-outline
      collapsed: true
      input:
        room_name:
          name: Room Name *
          description: >
            **REQUIRED** - Name of the room for this automation.
            
            Use lowercase with underscores for multi-word names (e.g., "living_room", "master_bedroom").
            
            ⚠️ This name is used to find your helper entities, so it must match exactly!
          selector:
            text:
        
        control_mode:
          name: Control Mode *
          description: >
            **REQUIRED** - How are your lights set up?
            
            • **Smart Switch + Smart Lights** - Wall switch controls smart bulbs (doesn't cut power)
            • **Smart Lights Only** - Direct control of smart bulbs (lamps, etc.)
            • **Smart Switch Only** - Smart switch controlling regular bulbs
          default: "switch_only"
          selector:
            select:
              options:
                - label: "Smart Switch + Smart Lights"
                  value: "switch_and_lights"
                - label: "Smart Lights Only"
                  value: "lights_only"
                - label: "Smart Switch Only"
                  value: "switch_only"
        
        light_switch:
          name: Light Switch Entity
          description: >
            Based on your Control Mode:
            • **Smart Switch + Smart Lights**: Select your wall switch
            • **Smart Lights Only**: Leave empty
            • **Smart Switch Only**: Select your smart switch
          default: ""
          selector:
            entity:
              domain: [switch, light]
        
        light_entities:
          name: Smart Light Entities
          description: >
            Based on your Control Mode:
            • **Smart Switch + Smart Lights**: Select your smart bulbs
            • **Smart Lights Only**: Select your smart bulbs
            • **Smart Switch Only**: Leave empty
          default: []
          selector:
            entity:
              domain: light
              multiple: true
    
    # Section 2: Presence Detection
    presence_detection:
      name: "Presence Detection"
      icon: mdi:motion-sensor
      collapsed: true
      input:
        presence_pir_sensor:
          name: Motion Sensor (PIR) *
          description: >
            **REQUIRED** - Primary motion detection sensor.
            • PIR sensors (instant motion detection)
            • Everything Presence PIR sensor
            • Standard motion detectors
          selector:
            entity:
              domain: binary_sensor
              device_class: 
                - motion
                - occupancy
                - presence
        
        presence_mmwave_sensor:
          name: Occupancy Sensor (mmWave/Radar)
          description: >
            **OPTIONAL** - Secondary sensor for stillness detection.
            • mmWave/radar sensors
            • Everything Presence occupancy sensor
            
            💡 TIP: If you only have one sensor, select the same sensor as above.
          default: ""
          selector:
            entity:
              domain: binary_sensor
              device_class: 
                - motion
                - occupancy
                - presence
        
        sensor_off_latency_entity:
          name: Dynamic Sensor Off Latency
          description: >
            **OPTIONAL** - Entity providing dynamic timeout.
            
            For Everything Presence: number.everything_presence_xxx_occupancy_off_latency
            
            Leave blank to use fixed value below.
          default: ""
          selector:
            entity:
              domain: number
              multiple: false
        
        fixed_latency_seconds:
          name: Fixed Sensor Off Latency
          description: >
            Seconds before sensor reports "clear" after last motion.
            • Short (30s): Responsive
            • Medium (60s): Balanced
            • Long (120s): Conservative
          default: 60
          selector:
            number:
              min: 10
              max: 300
              unit_of_measurement: sec
              mode: slider
              step: 10
        
        vacancy_timeout_multiplier:
          name: Vacancy Timeout Multiplier
          description: >
            Multiplier for sensor latency before lights off.
            
            Example: 60s latency × 5 = 5 minutes
          default: 5
          selector:
            number:
              min: 1
              max: 30
              mode: slider
              step: 1
    
    # Section 3: Light Level Control
    light_level_control:
      name: "Light Level Control"
      icon: mdi:brightness-6
      collapsed: true
      input:
        illuminance_sensor:
          name: Illuminance Sensor *
          description: >
            **REQUIRED** - Sensor measuring room brightness in lux.
            
            💡 No sensor? Create an input_number helper set to 50 lux.
          selector:
            entity:
              domain: 
                - sensor
                - input_number
        
        dark_threshold:
          name: Dark Threshold (Lights ON)
          description: >
            Below this = lights needed when occupied.
            • Bedrooms: 20-30 lux
            • Living areas: 30-40 lux
            • Workspaces: 40-50 lux
          default: 30
          selector:
            number:
              min: 0
              max: 499
              unit_of_measurement: lux
              mode: slider
              step: 1
        
        bright_threshold:
          name: Bright Threshold (Natural Light OK)
          description: >
            Above this = enough natural light.
            • Bedrooms: 150-200 lux
            • Living areas: 200-250 lux
            • Workspaces: 250-300 lux
            
            ⚠️ Must be at least 10 lux higher than Dark Threshold!
          default: 200
          selector:
            number:
              min: 1
              max: 500
              unit_of_measurement: lux
              mode: slider
              step: 1
        
        extremely_dark_threshold:
          name: Extremely Dark Threshold
          description: >
            Pitch black conditions (1-5 lux typical).
            Used for aggressive dimming at night.
          default: 3
          selector:
            number:
              min: 0
              max: 20
              unit_of_measurement: lux
              mode: slider
              step: 0.1
        
        enable_illuminance_averaging:
          name: Enable Illuminance Averaging
          description: >
            **RECOMMENDED** - Filters out temporary light changes:
            • Lightning flashes
            • Camera flashes
            • Passing clouds
          default: true
          selector:
            boolean:
    
    # Section 4: Manual Override Behavior
    manual_override:
      name: "Manual Override"
      icon: mdi:hand-back-right
      collapsed: true
      input:
        override_behavior:
          name: Override Clearing Method
          description: >
            How should manual overrides be cleared?
            
            **Timeout Only** - Full control for set hours
            **Vacancy Can Clear** - Also clears after extended vacancy
          default: "timeout_only"
          selector:
            select:
              options:
                - label: "Timeout Only - Full manual control"
                  value: "timeout_only"
                - label: "Vacancy Can Clear - Smarter but less control"
                  value: "vacancy_clear"
        
        override_timeout_hours:
          name: Override Timeout Duration
          description: >
            Hours before override expires (1-24).
          default: 3
          selector:
            number:
              min: 1
              max: 24
              unit_of_measurement: hours
              mode: slider
              step: 0.5
        
        override_respect_presence:
          name: Respect Presence for Timeout
          description: >
            **RECOMMENDED** - Override won't clear while you're in the room.
            Prevents lights changing during long activities (movies, etc.).
          default: true
          selector:
            boolean:
        
        vacancy_clear_minutes:
          name: Vacancy Clear Time
          description: >
            Minutes of vacancy before clearing override.
            Only applies when using "Vacancy Can Clear".
          default: 45
          selector:
            number:
              min: 10
              max: 120
              unit_of_measurement: min
              mode: slider
              step: 5
    
    # Section 5: Daytime Control (Energy Saving)
    daytime_control:
      name: "Daytime Control"
      icon: mdi:weather-sunny
      collapsed: true
      input:
        daytime_control_mode:
          name: Daytime Lighting Control
          description: >
            Control automatic lighting during daytime:
            
            **Always Allow** - Normal operation
            **Block When Away** - No auto-on when nobody home
            **Always Block** - Never auto-on during daytime
          default: "always_allow"
          selector:
            select:
              options:
                - label: "Always Allow - Normal operation"
                  value: "always_allow"
                - label: "Block When Away - Save energy when gone"
                  value: "block_when_away"
                - label: "Always Block - No daytime auto-on"
                  value: "always_block"
        
        presence_trackers:
          name: Device Trackers
          description: >
            **Required for "Block When Away"**
            
            Select family phones/devices to track home presence.
            Someone home = ANY device is home.
          default: []
          selector:
            entity:
              domain: device_tracker
              multiple: true
        
        sunrise_offset_minutes:
          name: Sunrise Offset
          description: >
            Adjust daytime start relative to sunrise.
            • Positive (+30): Daytime starts AFTER sunrise
            • Negative (-30): Daytime starts BEFORE sunrise
          default: 30
          selector:
            number:
              min: -120
              max: 120
              unit_of_measurement: min
              mode: slider
              step: 5
        
        sunset_offset_minutes:
          name: Sunset Offset
          description: >
            Adjust daytime end relative to sunset.
            • Positive (+30): Daytime ends AFTER sunset
            • Negative (-30): Daytime ends BEFORE sunset
          default: -30
          selector:
            number:
              min: -120
              max: 120
              unit_of_measurement: min
              mode: slider
              step: 5
    
    # Section 6: Bedroom Features
    bedroom_features:
      name: "Bedroom Features"
      icon: mdi:bed
      collapsed: true
      input:
        bed_occupied_helper:
          name: Bed Occupancy Sensor
          description: >
            **OPTIONAL - For bedrooms only**
            
            When bed occupied:
            • Lights won't turn on automatically
            • Can turn off when getting into bed
            • Enables night light mode
          default: ""
          selector:
            entity:
              domain: 
                - binary_sensor
                - input_boolean
        
        turn_off_when_bed_occupied:
          name: Auto-Off When Getting Into Bed
          description: >
            Turn lights OFF when getting into bed?
            Perfect for bedtime routine.
          default: true
          selector:
            boolean:
        
        bed_entry_delay_seconds:
          name: Bed Entry Delay
          description: >
            Seconds before turning lights OFF when bed occupied.
            Prevents false triggers from sitting.
          default: 30
          selector:
            number:
              min: 0
              max: 300
              unit_of_measurement: sec
              mode: slider
              step: 5
        
        bed_exit_delay_seconds:
          name: Bed Exit Delay
          description: >
            Seconds before allowing lights ON after leaving bed.
            Prevents triggers from rolling over.
          default: 15
          selector:
            number:
              min: 0
              max: 120
              unit_of_measurement: sec
              mode: slider
              step: 5
    
    # Section 7: Dynamic Lighting (NEW - Replaces Adaptive Lighting)
    dynamic_lighting:
      name: "Dynamic Lighting"
      icon: mdi:theme-light-dark
      collapsed: true
      input:
        dynamic_lighting_mode:
          name: Dynamic Lighting Mode
          description: >
            Choose how your lights adapt throughout the day:
            
            • **Disabled** - No automatic adjustments
            • **Basic** - Simple time-based transitions (legacy mode)
            • **Natural** - Sun elevation-based natural lighting
            • **Advanced** - Full customization with all options
          default: "basic"
          selector:
            select:
              options:
                - label: "Disabled - No automatic adjustments"
                  value: "disabled"
                - label: "Basic - Simple time-based transitions"
                  value: "basic"
                - label: "Natural - Sun-based circadian lighting"
                  value: "natural"
                - label: "Advanced - Full customization"
                  value: "advanced"
        
        # Brightness Control
        enable_dynamic_brightness:
          name: Enable Dynamic Brightness
          description: >
            Automatically adjust brightness based on:
            • Time of day (Basic mode)
            • Sun elevation (Natural mode)
            • Lux levels (Advanced mode)
          default: true
          selector:
            boolean:
        
        enable_lux_brightness:
          name: Enable Lux-Based Brightness
          description: >
            **Natural/Advanced modes only**
            
            Adjust brightness based on ambient light levels.
            Works with your illuminance averaging.
          default: false
          selector:
            boolean:
        
        # Color Temperature Control
        enable_color_temperature:
          name: Enable Color Temperature Control
          description: >
            Adjust light color throughout the day.
            • Cool white daytime (alertness)
            • Warm white nighttime (relaxation)
          default: true
          selector:
            boolean:
        
        # Color Control (NEW)
        enable_color_control:
          name: Enable RGB Color Control
          description: >
            **Advanced mode only**
            
            Use RGB colors instead of color temperature.
            Great for mood lighting and special effects.
          default: false
          selector:
            boolean:
        
        color_mode:
          name: Color Control Mode
          description: >
            **Advanced mode only**
            
            Choose your color control method:
            • **RGB** - Standard RGB colors
            • **RGBW** - RGB + White channel
            • **RGBWW** - RGB + Cold/Warm white
          default: "rgb"
          selector:
            select:
              options:
                - label: "RGB - Standard colors"
                  value: "rgb"
                - label: "RGBW - With white channel"
                  value: "rgbw"
                - label: "RGBWW - With dual white"
                  value: "rgbww"
        
        # Sun Elevation Parameters (Natural/Advanced modes)
        sun_elevation_preset:
          name: Sun Elevation Preset
          description: >
            **Natural mode only**
            
            Choose a preset for sun-based transitions:
            • **Gentle** - Slow, gradual changes
            • **Moderate** - Balanced transitions
            • **Aggressive** - Quick, responsive changes
          default: "moderate"
          selector:
            select:
              options:
                - label: "Gentle - Slow transitions"
                  value: "gentle"
                - label: "Moderate - Balanced"
                  value: "moderate"
                - label: "Aggressive - Quick changes"
                  value: "aggressive"
        
        # Advanced Sun Elevation Parameters
        sun_elevation_start_rising:
          name: Sun Rising Start Point
          description: >
            **Advanced mode only**
            
            Sun elevation when morning transition begins.
            Default: -1.5° (civil dawn)
          default: -1.5
          selector:
            number:
              min: -10
              max: 30
              step: 0.5
              unit_of_measurement: degrees
        
        sun_elevation_end_rising:
          name: Sun Rising End Point
          description: >
            **Advanced mode only**
            
            Sun elevation when morning transition completes.
            Default: 15° (mid-morning)
          default: 15
          selector:
            number:
              min: 0
              max: 90
              step: 0.5
              unit_of_measurement: degrees
        
        sun_elevation_start_falling:
          name: Sun Falling Start Point
          description: >
            **Advanced mode only**
            
            Sun elevation when evening transition begins.
            Default: 15° (late afternoon)
          default: 15
          selector:
            number:
              min: 0
              max: 90
              step: 0.5
              unit_of_measurement: degrees
        
        sun_elevation_end_falling:
          name: Sun Falling End Point
          description: >
            **Advanced mode only**
            
            Sun elevation when evening transition completes.
            Default: -4° (nautical dusk)
          default: -4.0
          selector:
            number:
              min: -10
              max: 30
              step: 0.5
              unit_of_measurement: degrees
        
        # Brightness Range
        max_brightness:
          name: Maximum Brightness
          description: >
            Peak brightness during the day.
            100% = Full brightness
          default: 100
          selector:
            number:
              min: 10
              max: 100
              mode: slider
              step: 5
              unit_of_measurement: '%'
        
        min_brightness:
          name: Minimum Brightness
          description: >
            Lowest brightness at night.
            0% = Turn off when very dark
          default: 20
          selector:
            number:
              min: 0
              max: 100
              mode: slider
              step: 5
              unit_of_measurement: '%'
        
        # Color Temperature Range
        day_color_temp:
          name: Daytime Color Temperature
          description: >
            Color temperature at peak daylight.
            Higher = cooler/bluer light
          default: 5000
          selector:
            number:
              min: 2700
              max: 6500
              unit_of_measurement: K
              mode: slider
              step: 100
        
        night_color_temp:
          name: Nighttime Color Temperature
          description: >
            Color temperature at night.
            Lower = warmer/orange light
          default: 3000
          selector:
            number:
              min: 2700
              max: 6500
              unit_of_measurement: K
              mode: slider
              step: 100
        
        # RGB Colors (Advanced mode)
        day_rgb_color:
          name: Daytime RGB Color
          description: >
            **Advanced mode with RGB enabled**
            
            RGB color for daytime hours
          default: [255, 255, 255]
          selector:
            color_rgb:
        
        night_rgb_color:
          name: Nighttime RGB Color
          description: >
            **Advanced mode with RGB enabled**
            
            RGB color for nighttime hours
          default: [255, 147, 41]
          selector:
            color_rgb:
        
        # Transition Control
        enable_fade_on:
          name: Enable Fade On
          description: >
            Lights fade in smoothly when turning on.
          default: true
          selector:
            boolean:
        
        fade_on_time:
          name: Fade On Duration
          description: >
            Seconds for fade in effect.
          default: 1.5
          selector:
            number:
              min: 0.5
              max: 10
              unit_of_measurement: sec
              mode: slider
              step: 0.5
        
        enable_fade_off:
          name: Enable Fade Off
          description: >
            Lights fade out smoothly when turning off.
          default: true
          selector:
            boolean:
        
        fade_off_time:
          name: Fade Off Duration
          description: >
            Seconds for fade out effect.
          default: 2.0
          selector:
            number:
              min: 0.5
              max: 10
              unit_of_measurement: sec
              mode: slider
              step: 0.5
        
        # Dead Zone and Step Control (NEW)
        brightness_dead_zone:
          name: Brightness Dead Zone
          description: >
            **Natural/Advanced modes**
            
            Ignore brightness changes smaller than this.
            Prevents annoying micro-adjustments.
          default: 7
          selector:
            number:
              min: 0
              max: 15
              step: 1
              unit_of_measurement: '%'
        
        brightness_step:
          name: Brightness Step Size
          description: >
            **Natural/Advanced modes**
            
            Maximum brightness change per adjustment.
            Smaller = smoother but slower transitions.
          default: 5
          selector:
            number:
              min: 1
              max: 20
              step: 1
              unit_of_measurement: '%'
        
        # Lux-Based Brightness Parameters (Advanced mode)
        lux_min_threshold:
          name: Minimum Lux Threshold
          description: >
            **Advanced mode with lux brightness**
            
            Below this = maximum brightness needed
          default: 40
          selector:
            number:
              min: 0
              max: 200
              step: 10
              unit_of_measurement: lux
        
        lux_max_threshold:
          name: Maximum Lux Threshold
          description: >
            **Advanced mode with lux brightness**
            
            Above this = minimum brightness needed
          default: 400
          selector:
            number:
              min: 100
              max: 1000
              step: 50
              unit_of_measurement: lux
    
    # Section 8: Night Light Mode (NEW)
    night_light_mode:
      name: "Night Light Mode"
      icon: mdi:weather-night
      collapsed: true
      input:
        enable_night_light:
          name: Enable Night Light Mode
          description: >
            Special lighting mode for nighttime.
            Perfect for bedroom and hallway navigation.
          default: false
          selector:
            boolean:
        
        night_light_entities:
          name: Night Light Entities
          description: >
            **OPTIONAL** - Specific lights for night mode.
            
            Leave empty to use main lights at reduced brightness.
          default: []
          selector:
            entity:
              domain: light
              multiple: true
        
        night_light_trigger:
          name: Night Light Trigger
          description: >
            When to activate night light mode:
            
            • **Time** - Between specific hours
            • **Bed Sensor** - When bed is occupied
            • **Both** - Either condition triggers it
          default: "time"
          selector:
            select:
              options:
                - label: "Time - Specific hours"
                  value: "time"
                - label: "Bed Sensor - When in bed"
                  value: "bed"
                - label: "Both - Time OR bed occupied"
                  value: "both"
        
        night_light_start_time:
          name: Night Light Start Time
          description: >
            When night light mode begins.
          default: "22:00:00"
          selector:
            time:
        
        night_light_end_time:
          name: Night Light End Time
          description: >
            When night light mode ends.
          default: "06:00:00"
          selector:
            time:
        
        night_light_brightness:
          name: Night Light Brightness
          description: >
            Brightness for night light mode.
            Very low values recommended (5-20%).
          default: 10
          selector:
            number:
              min: 1
              max: 50
              mode: slider
              step: 1
              unit_of_measurement: '%'
        
        night_light_color_temp:
          name: Night Light Color Temperature
          description: >
            Color temperature for night lights.
            Lower = warmer, less disruptive to sleep.
          default: 2700
          selector:
            number:
              min: 2000
              max: 4000
              unit_of_measurement: K
              mode: slider
              step: 100
        
        night_light_use_color:
          name: Use Color for Night Light
          description: >
            Use RGB color instead of color temperature.
            Great for red/amber night lights.
          default: false
          selector:
            boolean:
        
        night_light_rgb_color:
          name: Night Light RGB Color
          description: >
            RGB color for night light mode.
            Red/amber recommended for minimal disruption.
          default: [255, 0, 0]
          selector:
            color_rgb:
        
        night_light_transition:
          name: Night Light Transition Time
          description: >
            Transition time for night light changes.
            Longer = gentler on sleepy eyes.
          default: 3
          selector:
            number:
              min: 1
              max: 10
              unit_of_measurement: sec
              mode: slider
              step: 0.5
        
        night_light_vacancy_timeout:
          name: Night Light Vacancy Timeout
          description: >
            Minutes before night lights turn off when vacant.
            Shorter timeout for bathroom visits.
          default: 2
          selector:
            number:
              min: 1
              max: 10
              unit_of_measurement: min
              mode: slider
              step: 0.5
    
    # Section 9: Guest Mode
    guest_mode:
      name: "Guest Mode"
      icon: mdi:account-multiple
      collapsed: true
      input:
        enable_guest_mode:
          name: Enable Guest Mode
          description: >
            Special behavior for visitors:
            • Lights stay on longer
            • Extended overrides
            • Less aggressive automation
          default: false
          selector:
            boolean:
        
        guest_vacancy_multiplier:
          name: Guest Vacancy Multiplier
          description: >
            How much longer before turning off.
            2.5 = 2.5× longer wait time.
          default: 2.5
          selector:
            number:
              min: 1.5
              max: 5.0
              mode: slider
              step: 0.5
        
        guest_override_multiplier:
          name: Guest Override Multiplier
          description: >
            How much longer overrides last.
            2.0 = Twice as long.
          default: 2.0
          selector:
            number:
              min: 1.5
              max: 5.0
              mode: slider
              step: 0.5
        
        guest_ignore_bed:
          name: Ignore Bed Sensor in Guest Mode
          description: >
            Disable bed sensor when guests present.
            Useful for guest bedrooms.
          default: true
          selector:
            boolean:
    
    # Section 10: System & Diagnostics
    system_diagnostics:
      name: "System & Diagnostics"
      icon: mdi:cog-outline
      collapsed: true
      input:
        enable_debug_logs:
          name: Enable Debug Logging
          description: >
            Detailed decision logs for troubleshooting.
            View in: Settings → System → Logs
            
            ⚠️ Creates many log entries - disable when not needed!
          default: false
          selector:
            boolean:
        
        enable_update_check:
          name: Check for Blueprint Updates
          description: >
            Get notified about new versions.
            
            ⚠️ Requires sensor setup (see blueprint description).
          default: false
          selector:
            boolean:

# Variables and state management - Enhanced v4.0.0 with dynamic lighting
variables:
  # Store start time for performance monitoring
  start_time: "{{ now().timestamp() }}"
  
  # Action start time for execution metrics
  action_start_time: "{{ now().timestamp() }}"
  
  # Version checking
  blueprint_version: "4.0.0"  # UPDATE THIS WITH EACH RELEASE
  enable_update_check: !input enable_update_check
  update_sensor: "sensor.universal_lighting_updates"
  
  # Check if sensor exists and has data
  sensor_exists: >-
    {{ states(update_sensor) not in ['unknown', 'unavailable', None] }}
  
  # Get latest version safely
  latest_version: >-
    {% if sensor_exists %}
      {{ states(update_sensor) | replace('v', '') | replace('V', '') }}
    {% else %}
      {{ blueprint_version }}
    {% endif %}
  
  # Check if update available
  update_available: >-
    {% if enable_update_check and sensor_exists %}
      {% set current = blueprint_version | replace('v', '') | replace('V', '') %}
      {% set latest = latest_version %}
      {% if current != latest %}
        {% set current_parts = current.split('.') | map('int', 0) | list %}
        {% set latest_parts = latest.split('.') | map('int', 0) | list %}
        {% if latest_parts[0] > current_parts[0] %}
          true
        {% elif latest_parts[0] == current_parts[0] and latest_parts[1] | default(0) > current_parts[1] | default(0) %}
          true
        {% elif latest_parts[0] == current_parts[0] and latest_parts[1] | default(0) == current_parts[1] | default(0) and latest_parts[2] | default(0) > current_parts[2] | default(0) %}
          true
        {% else %}
          false
        {% endif %}
      {% else %}
        false
      {% endif %}
    {% else %}
      false
    {% endif %}
  
  # Get release info if available
  release_name: >-
    {% if sensor_exists %}
      {{ state_attr(update_sensor, 'name') | default('New Version Available') }}
    {% else %}
      ""
    {% endif %}
  
  release_url: >-
    {% if sensor_exists %}
      {{ state_attr(update_sensor, 'html_url') | default('https://github.com/Chris971991/universal-smart-light-automation/releases/latest') }}
    {% else %}
      ""
    {% endif %}
  
  # Input variables
  room_name: !input room_name
  presence_pir_sensor: !input presence_pir_sensor
  presence_mmwave_sensor: !input presence_mmwave_sensor
  illuminance_sensor: !input illuminance_sensor
  light_switch: !input light_switch
  light_entities: !input light_entities
  control_mode: !input control_mode
  daytime_control_mode: !input daytime_control_mode
  presence_trackers: !input presence_trackers
  sunrise_offset_minutes: !input sunrise_offset_minutes
  sunset_offset_minutes: !input sunset_offset_minutes
  bed_occupied_helper: !input bed_occupied_helper
  turn_off_when_bed_occupied: !input turn_off_when_bed_occupied
  bed_entry_delay_seconds: !input bed_entry_delay_seconds
  bed_exit_delay_seconds: !input bed_exit_delay_seconds
  dark_threshold: !input dark_threshold
  bright_threshold: !input bright_threshold
  extremely_dark_threshold: !input extremely_dark_threshold
  override_timeout_hours: !input override_timeout_hours
  override_respect_presence: !input override_respect_presence
  enable_debug_logs: !input enable_debug_logs
  sensor_off_latency_entity: !input sensor_off_latency_entity
  fixed_latency_seconds: !input fixed_latency_seconds
  vacancy_timeout_multiplier: !input vacancy_timeout_multiplier
  override_behavior: !input override_behavior
  vacancy_clear_minutes: !input vacancy_clear_minutes
  enable_illuminance_averaging: !input enable_illuminance_averaging
  enable_guest_mode: !input enable_guest_mode
  guest_vacancy_multiplier: !input guest_vacancy_multiplier
  guest_override_multiplier: !input guest_override_multiplier
  guest_ignore_bed: !input guest_ignore_bed
  
  # NEW Dynamic Lighting inputs
  dynamic_lighting_mode: !input dynamic_lighting_mode
  enable_dynamic_brightness: !input enable_dynamic_brightness
  enable_lux_brightness: !input enable_lux_brightness
  enable_color_temperature: !input enable_color_temperature
  enable_color_control: !input enable_color_control
  color_mode: !input color_mode
  sun_elevation_preset: !input sun_elevation_preset
  sun_elevation_start_rising: !input sun_elevation_start_rising
  sun_elevation_end_rising: !input sun_elevation_end_rising
  sun_elevation_start_falling: !input sun_elevation_start_falling
  sun_elevation_end_falling: !input sun_elevation_end_falling
  max_brightness: !input max_brightness
  min_brightness: !input min_brightness
  day_color_temp: !input day_color_temp
  night_color_temp: !input night_color_temp
  day_rgb_color: !input day_rgb_color
  night_rgb_color: !input night_rgb_color
  enable_fade_on: !input enable_fade_on
  fade_on_time: !input fade_on_time
  enable_fade_off: !input enable_fade_off
  fade_off_time: !input fade_off_time
  brightness_dead_zone: !input brightness_dead_zone
  brightness_step: !input brightness_step
  lux_min_threshold: !input lux_min_threshold
  lux_max_threshold: !input lux_max_threshold
  
  # NEW Night Light inputs
  enable_night_light: !input enable_night_light
  night_light_entities: !input night_light_entities
  night_light_trigger: !input night_light_trigger
  night_light_start_time: !input night_light_start_time
  night_light_end_time: !input night_light_end_time
  night_light_brightness: !input night_light_brightness
  night_light_color_temp: !input night_light_color_temp
  night_light_use_color: !input night_light_use_color
  night_light_rgb_color: !input night_light_rgb_color
  night_light_transition: !input night_light_transition
  night_light_vacancy_timeout: !input night_light_vacancy_timeout
  
  # Determine control entities based on mode
  has_switch: "{{ light_switch != '' and light_switch is not none }}"
  has_lights: "{{ light_entities | length > 0 }}"
  has_bed_sensor: "{{ bed_occupied_helper != '' and bed_occupied_helper is not none }}"
  has_presence_trackers: "{{ presence_trackers | length > 0 }}"
  has_night_lights: "{{ night_light_entities | length > 0 }}"
  
  # Check if trackers are required but missing
  trackers_required: "{{ daytime_control_mode == 'block_when_away' }}"
  trackers_missing: "{{ trackers_required and not has_presence_trackers }}"
  
  # Get sun attributes
  sun_next_rising: "{{ state_attr('sun.sun', 'next_rising') }}"
  sun_next_setting: "{{ state_attr('sun.sun', 'next_setting') }}"
  sun_elevation: "{{ state_attr('sun.sun', 'elevation') | float(0) }}"
  
  # Calculate today's actual sunrise (not next sunrise)
  sunrise_today: >-
    {% set next_rising = sun_next_rising %}
    {% if next_rising %}
      {% set next_rising_time = as_timestamp(next_rising) %}
      {% set now_time = now().timestamp() %}
      {% set today_start = as_timestamp(today_at('00:00')) %}
      {% set today_end = as_timestamp(today_at('23:59:59')) %}
      
      {# If next_rising is tomorrow, calculate today's sunrise by subtracting 24 hours #}
      {% if next_rising_time > today_end %}
        {% set today_sunrise = next_rising_time - 86400 %}
      {% else %}
        {# Next rising is still today (we're before sunrise) #}
        {% set today_sunrise = next_rising_time %}
      {% endif %}
      
      {{ today_sunrise }}
    {% else %}
      {# Fallback to 6 AM if no sun data #}
      {{ as_timestamp(today_at('06:00')) }}
    {% endif %}
  
  # Calculate today's actual sunset (not next sunset)
  sunset_today: >-
    {% set next_setting = sun_next_setting %}
    {% if next_setting %}
      {% set next_setting_time = as_timestamp(next_setting) %}
      {% set now_time = now().timestamp() %}
      {% set today_start = as_timestamp(today_at('00:00')) %}
      {% set today_end = as_timestamp(today_at('23:59:59')) %}
      
      {# If next_setting is tomorrow, calculate today's sunset by subtracting 24 hours #}
      {% if next_setting_time > today_end %}
        {% set today_sunset = next_setting_time - 86400 %}
      {% elif next_setting_time < today_start %}
        {# Next setting is yesterday (shouldn't happen but handle it) #}
        {% set today_sunset = next_setting_time + 86400 %}
      {% else %}
        {# Next setting is still today #}
        {% set today_sunset = next_setting_time %}
      {% endif %}
      
      {{ today_sunset }}
    {% else %}
      {# Fallback to 6 PM if no sun data #}
      {{ as_timestamp(today_at('18:00')) }}
    {% endif %}
  
  # Apply offsets to sunrise and sunset (positive = later, negative = earlier)
  sunrise_with_offset: >-
    {% set sunrise_ts = sunrise_today | float %}
    {% set offset_seconds = (sunrise_offset_minutes | float(30)) * 60 %}
    {{ sunrise_ts + offset_seconds }}
  
  sunset_with_offset: >-
    {% set sunset_ts = sunset_today | float %}
    {% set offset_seconds = (sunset_offset_minutes | float(-30)) * 60 %}
    {{ sunset_ts + offset_seconds }}
  
  # Determine if it's currently daytime (between sunrise+offset and sunset+offset)
  is_daytime: >-
    {% set now_ts = now().timestamp() %}
    {% set sunrise_offset_ts = sunrise_with_offset | float %}
    {% set sunset_offset_ts = sunset_with_offset | float %}
    
    {# Handle edge cases #}
    {% if sunrise_offset_ts >= sunset_offset_ts %}
      {# This shouldn't happen unless offsets are extreme #}
      {# Use sun elevation as fallback #}
      {{ sun_elevation > 0 }}
    {% else %}
      {# Normal case: daytime is between sunrise+offset and sunset+offset #}
      {{ sunrise_offset_ts <= now_ts < sunset_offset_ts }}
    {% endif %}
  
  # Alternative method using sun elevation as validation
  is_sun_up: "{{ sun_elevation > -0.833 }}"
  
  # Double-check daytime calculation with sun elevation for reliability
  is_daytime_verified: >-
    {% set now_ts = now().timestamp() %}
    {% set sunrise_offset_ts = sunrise_with_offset | float %}
    {% set sunset_offset_ts = sunset_with_offset | float %}
    {% set time_based_daytime = is_daytime %}
    {% set elevation_based_daytime = is_sun_up %}
    
    {# If both agree, we're good #}
    {% if time_based_daytime == elevation_based_daytime %}
      {{ time_based_daytime }}
    {# If they disagree, check if we're near sunrise/sunset (within 60 minutes) #}
    {% elif (now_ts - sunrise_offset_ts) | abs < 3600 or (now_ts - sunset_offset_ts) | abs < 3600 %}
      {# Near transition time, trust the time-based calculation with offsets #}
      {{ time_based_daytime }}
    {% else %}
      {# Not near transition, something might be wrong, trust sun elevation #}
      {{ elevation_based_daytime }}
    {% endif %}
  
  # Use the verified daytime value for the rest of the automation
  is_daytime_final: "{{ is_daytime_verified }}"
  
  # Check if anyone is home (via device trackers)
  someone_home: >-
    {% if daytime_control_mode != 'block_when_away' or not has_presence_trackers %}
      {{ true }}
    {% else %}
      {% set home_devices = expand(presence_trackers) | selectattr('state', 'eq', 'home') | list %}
      {{ home_devices | count > 0 }}
    {% endif %}
  
  # Away mode active (nobody home AND daytime AND mode set to block_when_away)
  away_mode_active: >-
    {{ daytime_control_mode == 'block_when_away' and has_presence_trackers and not someone_home and is_daytime_final }}
  
  # No daytime lights mode active
  no_daytime_lights_active: >-
    {{ daytime_control_mode == 'always_block' and is_daytime_final }}
  
  # Should prevent automatic turn ON (but still allow OFF)
  prevent_auto_on: >-
    {{ away_mode_active or no_daytime_lights_active }}
  
  # Primary control entity (for state checking and basic control)
  primary_control_entity: >-
    {% if control_mode == 'lights_only' %}
      {% if has_lights %}
        {{ light_entities[0] }}
      {% else %}
        none
      {% endif %}
    {% elif control_mode == 'switch_and_lights' %}
      {% if has_lights %}
        {{ light_entities[0] }}
      {% elif has_switch %}
        {{ light_switch }}
      {% else %}
        none
      {% endif %}
    {% else %}
      {% if has_switch %}
        {{ light_switch }}
      {% else %}
        none
      {% endif %}
    {% endif %}
  
  # Helper entity names (forced to lowercase for Home Assistant compatibility)
  automation_active_helper: "input_boolean.{{ room_name | lower }}_automation_active"
  manual_override_helper: "input_boolean.{{ room_name | lower }}_manual_override"
  light_auto_on_helper: "input_boolean.{{ room_name | lower }}_light_auto_on"
  last_automation_action_helper: "input_datetime.{{ room_name | lower }}_last_automation_action"
  occupancy_state_helper: "input_boolean.{{ room_name | lower }}_occupancy_state"
  illuminance_history_helper: "input_text.{{ room_name | lower }}_illuminance_history"
  night_light_active_helper: "input_boolean.{{ room_name | lower }}_night_light_active"
  dynamic_mode_helper: "input_text.{{ room_name | lower }}_dynamic_mode"
  
  # Determine effective mmWave sensor
  mmwave_sensor: >-
    {% if presence_mmwave_sensor and presence_mmwave_sensor != '' %}
      {{ presence_mmwave_sensor }}
    {% else %}
      {{ presence_pir_sensor }}
    {% endif %}
  
  # Cache entity states for performance (with recovery)
  pir_state: >-
    {% set state = states(presence_pir_sensor) %}
    {% if state in ['unknown', 'unavailable', None, ''] %}
      off
    {% else %}
      {{ state }}
    {% endif %}
  
  mmwave_state: >-
    {% set state = states(mmwave_sensor) %}
    {% if state in ['unknown', 'unavailable', None, ''] %}
      off
    {% else %}
      {{ state }}
    {% endif %}
  
  illuminance_state: >-
    {% set state = states(illuminance_sensor) %}
    {% if state in ['unknown', 'unavailable', None, ''] %}
      50
    {% else %}
      {{ state }}
    {% endif %}
  
  bed_state: >-
    {% if has_bed_sensor %}
      {% set state = states(bed_occupied_helper) %}
      {% if state in ['unknown', 'unavailable', None, ''] %}
        off
      {% else %}
        {{ state }}
      {% endif %}
    {% else %}
      off
    {% endif %}
  
  # Timestamps for state change tracking
  current_time: "{{ now().timestamp() }}"
  
  # Primary control state
  primary_state: >-
    {% if primary_control_entity != 'none' %}
      {% set state = states(primary_control_entity) %}
      {% if state in ['unknown', 'unavailable', None, ''] %}
        off
      {% else %}
        {{ state }}
      {% endif %}
    {% else %}
      off
    {% endif %}
  
  # Light states (checking all entities)
  lights_on: >-
    {% if control_mode == 'switch_only' %}
      {% if has_switch %}
        {{ states(light_switch) == 'on' }}
      {% else %}
        {{ false }}
      {% endif %}
    {% else %}
      {% if has_lights %}
        {% set lights_that_are_on = expand(light_entities) | selectattr('state', 'eq', 'on') | list %}
        {{ lights_that_are_on | count > 0 }}
      {% else %}
        {{ false }}
      {% endif %}
    {% endif %}
  
  # Basic state validations
  pir_valid: >-
    {{ pir_state not in ['unknown', 'unavailable', None, ''] }}
  mmwave_valid: >-
    {{ mmwave_state not in ['unknown', 'unavailable', None, ''] }}
  primary_valid: >-
    {{ primary_control_entity != 'none' and primary_state not in ['unknown', 'unavailable', None, ''] }}
  illuminance_valid: >-
    {{ illuminance_state not in ['unknown', 'unavailable', None, ''] }}
  bed_valid: >-
    {{ bed_state not in ['unknown', 'unavailable', None, ''] and has_bed_sensor }}
  
  # Core state evaluations
  pir_active: >-
    {{ pir_valid and pir_state == 'on' }}
  mmwave_active: >-
    {{ mmwave_valid and mmwave_state == 'on' }}
  
  # Room presence - someone physically in the room
  someone_present: >-
    {{ pir_active or mmwave_active }}
  
  # Bed occupancy
  bed_occupied_raw: "{{ bed_valid and bed_state == 'on' }}"
  
  # Final bed occupied state considering guest mode
  bed_occupied: >-
    {% if not has_bed_sensor %}
      {{ false }}
    {% elif enable_guest_mode and guest_ignore_bed %}
      {{ false }}
    {% else %}
      {{ bed_occupied_raw }}
    {% endif %}
  
  # Illuminance with averaging
  illuminance_raw: >-
    {% if illuminance_valid %}
      {{ illuminance_state | float(50) }}
    {% else %}
      50
    {% endif %}
  
  illuminance_history_raw: >-
    {% if states[illuminance_history_helper] %}
      {% set history = states(illuminance_history_helper) %}
      {% if history in ['unknown', 'unavailable', '', None] %}
        []
      {% else %}
        {{ history }}
      {% endif %}
    {% else %}
      []
    {% endif %}

  # Smart illuminance averaging with spike AND drop detection
  illuminance: >-
    {% if not enable_illuminance_averaging %}
      {{ illuminance_raw }}
    {% else %}
      {% if illuminance_history_raw == '[]' or illuminance_history_raw == [] %}
        {{ illuminance_raw }}
      {% else %}
        {% set history_str = illuminance_history_raw | string %}
        {% if history_str.startswith('[') and history_str.endswith(']') %}
          {% set values = history_str[1:-1].split(',') | select | map('float', 0) | list %}
          
          {% if values | length > 0 %}
            {% set last_avg = (values | sum) / (values | length) %}
            {% set change_ratio = illuminance_raw / last_avg if last_avg > 0 else 1 %}
            
            {# Detect both drops AND spikes #}
            {% if change_ratio < 0.3 and last_avg > 20 %}
              {# Major drop detected - likely lights turned off #}
              {{ illuminance_raw }}
            {% elif change_ratio > 5 and illuminance_raw > 500 %}
              {# Major spike detected - likely flash/lightning #}
              {{ last_avg | round(1) }}
            {% else %}
              {# Remove outliers in both directions #}
              {% set filtered_values = [] %}
              {% for val in values[-4:] %}
                {% set val_ratio = val / illuminance_raw if illuminance_raw > 0 else 999 %}
                {% if 0.2 < val_ratio < 5 or (illuminance_raw < 20 and val < 50) %}
                  {% set filtered_values = filtered_values + [val] %}
                {% endif %}
              {% endfor %}
              
              {% set all_values = filtered_values + [illuminance_raw | float] %}
              {{ (all_values | sum) / (all_values | length) | round(1) }}
            {% endif %}
          {% else %}
            {{ illuminance_raw }}
          {% endif %}
        {% else %}
          {{ illuminance_raw }}
        {% endif %}
      {% endif %}
    {% endif %}
  
  # Light level thresholds
  is_dark: "{{ illuminance < dark_threshold }}"
  is_bright: "{{ illuminance >= bright_threshold }}"
  is_extremely_dark: "{{ illuminance < extremely_dark_threshold }}"
  in_middle_range: "{{ dark_threshold <= illuminance < bright_threshold }}"
  
  # Helper states with validation
  manual_override: >-
    {% if states[manual_override_helper] %}
      {{ is_state(manual_override_helper, 'on') }}
    {% else %}
      {{ false }}
    {% endif %}
  
  automation_active: >-
    {% if states[automation_active_helper] %}
      {{ is_state(automation_active_helper, 'on') }}
    {% else %}
      {{ false }}
    {% endif %}
  
  light_was_auto_on: >-
    {% if states[light_auto_on_helper] %}
      {{ is_state(light_auto_on_helper, 'on') }}
    {% else %}
      {{ false }}
    {% endif %}
  
  # Check if night light should be active based on triggers
  should_use_night_light: >-
    {% if not enable_night_light %}
      {{ false }}
    {% else %}
      {% set hour = now().hour %}
      {% set minute = now().minute %}
      {% set current_time = hour * 60 + minute %}
      {% set start_time = night_light_start_time.split(':') %}
      {% set start_minutes = start_time[0] | int * 60 + start_time[1] | int %}
      {% set end_time = night_light_end_time.split(':') %}
      {% set end_minutes = end_time[0] | int * 60 + end_time[1] | int %}
      
      {% set time_triggered = false %}
      {% if start_minutes <= end_minutes %}
        {% set time_triggered = start_minutes <= current_time < end_minutes %}
      {% else %}
        {% set time_triggered = current_time >= start_minutes or current_time < end_minutes %}
      {% endif %}
      
      {% if night_light_trigger == 'time' %}
        {{ time_triggered }}
      {% elif night_light_trigger == 'bed' %}
        {{ bed_occupied }}
      {% else %}
        {{ time_triggered or bed_occupied }}
      {% endif %}
    {% endif %}
  
  # Time calculations
  primary_changed_time: >-
    {% if primary_control_entity != 'none' and states[primary_control_entity] %}
      {% if states[primary_control_entity].last_changed %}
        {{ as_timestamp(states[primary_control_entity].last_changed, current_time) }}
      {% else %}
        {{ current_time }}
      {% endif %}
    {% else %}
      {{ current_time }}
    {% endif %}
  
  override_changed_time: >-
    {% if states[manual_override_helper] %}
      {% if states[manual_override_helper].last_changed %}
        {{ as_timestamp(states[manual_override_helper].last_changed, current_time) }}
      {% else %}
        {{ current_time }}
      {% endif %}
    {% else %}
      {{ current_time }}
    {% endif %}
  
  occupancy_changed_time: >-
    {% if states[occupancy_state_helper] %}
      {% if states[occupancy_state_helper].last_changed %}
        {{ as_timestamp(states[occupancy_state_helper].last_changed, current_time) }}
      {% else %}
        {{ current_time }}
      {% endif %}
    {% else %}
      {{ current_time }}
    {% endif %}
  
  last_automation_time: >-
    {% if states[last_automation_action_helper] and states[last_automation_action_helper].state %}
      {% set last_action = states(last_automation_action_helper) %}
      {% if last_action not in ['unknown', 'unavailable', '', None] %}
        {% set action_time = as_timestamp(last_action, 0) %}
        {{ action_time }}
      {% else %}
        0
      {% endif %}
    {% else %}
      0
    {% endif %}
  
  primary_changed_seconds_ago: "{{ (current_time - primary_changed_time) | round(1) }}"
  primary_recently_changed: "{{ primary_changed_seconds_ago < 2 }}"
  primary_just_changed: "{{ primary_recently_changed }}"
  override_active_minutes: "{{ ((current_time - override_changed_time) / 60) | round(1) }}"
  room_vacant_minutes: >-
    {% if someone_present %}
      0
    {% else %}
      {{ ((current_time - occupancy_changed_time) / 60) | round(1) }}
    {% endif %}
  time_since_last_automation: "{{ (current_time - last_automation_time) | round(1) }}"
  
  # Check if automation_active is stale (stuck on)
  automation_active_stale: >-
    {% if automation_active %}
      {% if states[automation_active_helper] and states[automation_active_helper].last_changed %}
        {% set active_time = as_timestamp(states[automation_active_helper].last_changed, 0) %}
        {% if active_time > 0 %}
          {{ (current_time - active_time) > 3 }}
        {% else %}
          {{ true }}
        {% endif %}
      {% else %}
        {{ true }}
      {% endif %}
    {% else %}
      {{ false }}
    {% endif %}
  
  # Enhanced manual change detection
  is_manual_change: >-
    {% if trigger.platform != 'state' %}
      {{ false }}
    {% elif control_mode == 'switch_only' and trigger.entity_id == light_switch %}
      {% if automation_active and not automation_active_stale and time_since_last_automation < 1 %}
        {{ false }}
      {% else %}
        {{ true }}
      {% endif %}
    {% elif control_mode != 'switch_only' and trigger.entity_id in light_entities %}
      {% if automation_active and not automation_active_stale and time_since_last_automation < 1 %}
        {{ false }}
      {% else %}
        {{ true }}
      {% endif %}
    {% else %}
      {{ false }}
    {% endif %}
  
  # Trigger analysis
  is_primary_trigger: >-
    {% if control_mode == 'switch_only' %}
      {{ trigger.platform == 'state' and trigger.entity_id == light_switch }}
    {% else %}
      {{ trigger.platform == 'state' and trigger.entity_id in light_entities }}
    {% endif %}
  is_pir_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == presence_pir_sensor }}"
  is_mmwave_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == mmwave_sensor }}"
  is_illuminance_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == illuminance_sensor }}"
  is_periodic_trigger: "{{ trigger.platform == 'time_pattern' }}"
  is_sun_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == 'sun.sun' }}"
  
  user_turned_on: "{{ is_primary_trigger and trigger.to_state.state == 'on' and trigger.from_state.state == 'off' }}"
  user_turned_off: "{{ is_primary_trigger and trigger.to_state.state == 'off' and trigger.from_state.state == 'on' }}"
  
  # Dynamic Lighting Calculations
  sun_preset_values: >-
    {% if sun_elevation_preset == 'gentle' %}
      {"start_rising": -3, "end_rising": 20, "start_falling": 20, "end_falling": -6}
    {% elif sun_elevation_preset == 'aggressive' %}
      {"start_rising": 0, "end_rising": 10, "start_falling": 10, "end_falling": -2}
    {% else %}
      {"start_rising": -1.5, "end_rising": 15, "start_falling": 15, "end_falling": -4}
    {% endif %}
  
  # Calculate sun elevation progress
  sun_elevation_progress: >-
    {% if dynamic_lighting_mode == 'basic' %}
      {% set hour = now().hour %}
      {% if 6 <= hour < 9 %}
        {{ (hour - 6) / 3 }}
      {% elif 9 <= hour < 17 %}
        {{ 1 }}
      {% elif 17 <= hour < 21 %}
        {{ 1 - ((hour - 17) / 4) }}
      {% else %}
        {{ 0 }}
      {% endif %}
    {% else %}
      {% set elevation = sun_elevation | float(0) %}
      {% set start_r = sun_elevation_start_rising if dynamic_lighting_mode == 'advanced' else sun_preset_values.start_rising %}
      {% set end_r = sun_elevation_end_rising if dynamic_lighting_mode == 'advanced' else sun_preset_values.end_rising %}
      {% set start_f = sun_elevation_start_falling if dynamic_lighting_mode == 'advanced' else sun_preset_values.start_falling %}
      {% set end_f = sun_elevation_end_falling if dynamic_lighting_mode == 'advanced' else sun_preset_values.end_falling %}
      
      {% if elevation <= start_r %}
        {{ 0 }}
      {% elif elevation >= end_r and elevation >= start_f %}
        {{ 1 }}
      {% elif elevation < end_r and elevation > start_r %}
        {{ (elevation - start_r) / (end_r - start_r) }}
      {% elif elevation < start_f and elevation > end_f %}
        {{ 1 - ((elevation - end_f) / (start_f - end_f)) }}
      {% else %}
        {{ 0 }}
      {% endif %}
    {% endif %}
  
  # Calculate lux-based brightness factor
  lux_brightness_factor: >-
    {% if enable_lux_brightness and dynamic_lighting_mode in ['natural', 'advanced'] %}
      {% set current_lux = illuminance | float %}
      {% set min_lux = lux_min_threshold | float %}
      {% set max_lux = lux_max_threshold | float %}
      
      {% if current_lux <= min_lux %}
        {{ 1 }}
      {% elif current_lux >= max_lux %}
        {{ 0 }}
      {% else %}
        {{ 1 - ((current_lux - min_lux) / (max_lux - min_lux)) }}
      {% endif %}
    {% else %}
      {{ 1 }}
    {% endif %}
  
  # Light capabilities
  first_light_entity: >-
    {% if has_lights %}
      {{ light_entities[0] }}
    {% elif has_switch and light_switch.startswith('light.') %}
      {{ light_switch }}
    {% else %}
      none
    {% endif %}
  
  light_is_dimmable: >-
    {% if first_light_entity != 'none' %}
      {{ state_attr(first_light_entity, 'supported_features') is not none }}
    {% else %}
      {{ false }}
    {% endif %}
  
  light_supports_color_temp: >-
    {% if first_light_entity != 'none' %}
      {{ state_attr(first_light_entity, 'min_color_temp_kelvin') is not none }}
    {% else %}
      {{ false }}
    {% endif %}
  
  # Dynamic brightness calculation
  dynamic_brightness: >-
    {% if not enable_dynamic_brightness or dynamic_lighting_mode == 'disabled' %}
      100
    {% elif should_use_night_light %}
      {{ night_light_brightness }}
    {% elif dynamic_lighting_mode == 'basic' %}
      {% set hour = now().hour %}
      {% set night_hours = hour >= 22 or hour < 6 %}
      {% set evening_hours = hour >= 20 and hour < 22 %}
      {% set morning_hours = hour >= 6 and hour < 8 %}
      
      {% if is_extremely_dark %}
        {{ 30 if night_hours else 80 }}
      {% elif is_dark %}
        {% if night_hours %}
          40
        {% elif morning_hours or evening_hours %}
          70
        {% else %}
          90
        {% endif %}
      {% else %}
        100
      {% endif %}
    {% else %}
      {% set base_brightness = min_brightness + ((max_brightness - min_brightness) * sun_elevation_progress) %}
      {% set lux_adjusted = base_brightness * lux_brightness_factor %}
      {{ lux_adjusted | round(0) }}
    {% endif %}
  
  # Dynamic color temperature calculation
  dynamic_color_temp: >-
    {% if not enable_color_temperature or dynamic_lighting_mode == 'disabled' %}
      0
    {% elif should_use_night_light and not night_light_use_color %}
      {{ night_light_color_temp }}
    {% else %}
      {% set temp_range = day_color_temp - night_color_temp %}
      {% set temp = night_color_temp + (temp_range * sun_elevation_progress) %}
      {{ temp | int }}
    {% endif %}
  
  # RGB color calculation
  dynamic_rgb_color: >-
    {% if should_use_night_light and night_light_use_color %}
      {{ night_light_rgb_color }}
    {% elif enable_color_control and dynamic_lighting_mode == 'advanced' %}
      {% set r_range = day_rgb_color[0] - night_rgb_color[0] %}
      {% set g_range = day_rgb_color[1] - night_rgb_color[1] %}
      {% set b_range = day_rgb_color[2] - night_rgb_color[2] %}
      {% set r = night_rgb_color[0] + (r_range * sun_elevation_progress) %}
      {% set g = night_rgb_color[1] + (g_range * sun_elevation_progress) %}
      {% set b = night_rgb_color[2] + (b_range * sun_elevation_progress) %}
      [{{ r | int }}, {{ g | int }}, {{ b | int }}]
    {% else %}
      [255, 255, 255]
    {% endif %}
  
  # Apply dead zone to brightness
  target_brightness: "{{ dynamic_brightness }}"
  current_brightness: >-
    {% if first_light_entity != 'none' and states(first_light_entity) == 'on' %}
      {{ state_attr(first_light_entity, 'brightness') | float(255) / 2.55 }}
    {% else %}
      0
    {% endif %}
  
  brightness_needs_adjustment: >-
    {% if dynamic_lighting_mode in ['natural', 'advanced'] %}
      {% set diff = (target_brightness - current_brightness) | abs %}
      {{ diff > brightness_dead_zone }}
    {% else %}
      {{ true }}
    {% endif %}
  
  adjusted_brightness: >-
    {% if not brightness_needs_adjustment %}
      {{ current_brightness }}
    {% elif dynamic_lighting_mode in ['natural', 'advanced'] %}
      {% set diff = target_brightness - current_brightness %}
      {% if diff > brightness_step %}
        {{ current_brightness + brightness_step }}
      {% elif diff < -brightness_step %}
        {{ current_brightness - brightness_step }}
      {% else %}
        {{ target_brightness }}
      {% endif %}
    {% else %}
      {{ target_brightness }}
    {% endif %}
  
  # Transition time calculations
  effective_fade_on_time: >-
    {% if should_use_night_light %}
      {{ night_light_transition }}
    {% elif enable_fade_on %}
      {{ fade_on_time }}
    {% else %}
      0
    {% endif %}
  
  effective_fade_off_time: >-
    {% if should_use_night_light %}
      {{ night_light_transition }}
    {% elif enable_fade_off %}
      {{ fade_off_time }}
    {% else %}
      0
    {% endif %}
  
  # Guest mode adjustments
  effective_vacancy_multiplier: >-
    {{ (vacancy_timeout_multiplier * guest_vacancy_multiplier) if enable_guest_mode else vacancy_timeout_multiplier }}
  
  effective_override_hours: >-
    {{ (override_timeout_hours * guest_override_multiplier) if enable_guest_mode else override_timeout_hours }}
  
  # Sensor latency calculation
  sensor_off_latency_seconds: >-
    {% if sensor_off_latency_entity and sensor_off_latency_entity != '' %}
      {% set latency = states(sensor_off_latency_entity) | float(0) %}
      {% set base_latency = latency if latency > 0 else fixed_latency_seconds %}
    {% else %}
      {% set base_latency = fixed_latency_seconds %}
    {% endif %}
    {{ (base_latency * 1.5) if enable_guest_mode else base_latency }}
  
  # Vacancy timeout calculation
  vacancy_timeout_minutes: >-
    {% if should_use_night_light %}
      {{ night_light_vacancy_timeout }}
    {% else %}
      {% set timeout = (sensor_off_latency_seconds * effective_vacancy_multiplier) / 60 %}
      {{ [timeout | round(0, 'ceil'), 1] | max | int }}
    {% endif %}
  
  # Override timeout logic
  override_timeout_exceeded: >-
    {% if manual_override and (override_active_minutes / 60) > effective_override_hours %}
      {% if override_respect_presence %}
        {{ not someone_present or lights_on }}
      {% else %}
        {{ true }}
      {% endif %}
    {% else %}
      {{ false }}
    {% endif %}

  vacancy_clear_triggered: >-
    {{ manual_override and override_behavior == 'vacancy_clear' and room_vacant_minutes >= (vacancy_clear_minutes * guest_vacancy_multiplier if enable_guest_mode else vacancy_clear_minutes) }}

  override_should_clear: "{{ override_timeout_exceeded or vacancy_clear_triggered }}"

  override_clear_reason: >-
    {% if override_timeout_exceeded %}
      "timeout ({{ effective_override_hours }}h)"
    {% elif vacancy_clear_triggered %}
      "vacancy ({{ room_vacant_minutes | int }}min)"
    {% else %}
      "unknown"
    {% endif %}
  
  # Automation intent
  auto_would_turn_on: >-
    {% if prevent_auto_on %}
      {{ false }}
    {% elif bed_occupied and not should_use_night_light and not (enable_guest_mode and guest_ignore_bed) %}
      {{ false }}
    {% else %}
      {{ is_dark and someone_present }}
    {% endif %}
  
  auto_would_turn_off: >-
    {% if not someone_present and lights_on %}
      {{ true }}
    {% elif has_bed_sensor and turn_off_when_bed_occupied and bed_occupied and lights_on and not should_use_night_light and not (enable_guest_mode and guest_ignore_bed) %}
      {{ true }}
    {% else %}
      {{ false }}
    {% endif %}

# Triggers - Universal handling with dynamic lighting support
trigger:
  # State changes
  - platform: state
    entity_id: !input presence_pir_sensor
    id: pir_change
  
  - platform: state
    entity_id: !input presence_mmwave_sensor
    id: mmwave_change
    
  - platform: state
    entity_id: !input illuminance_sensor
    id: illuminance_change
    
  - platform: state
    entity_id: !input light_switch
    id: switch_change
    
  - platform: state
    entity_id: !input light_entities
    id: light_change
    
  - platform: state
    entity_id: sun.sun
    attribute: elevation
    id: sun_elevation_change
    
  # Periodic checks (handles bed sensor, dynamic lighting updates, and monitoring)
  - platform: time_pattern
    seconds: "/5"  # Check every 5 seconds for responsive updates
    id: periodic_check
  
  # Check for updates periodically
  - platform: time
    at: "10:00:00"
    id: update_check
  
  - platform: state
    entity_id: sensor.universal_lighting_updates
    id: update_sensor_changed

# Conditions
condition:
  # Skip if triggered by empty/invalid entity
  - condition: template
    value_template: >-
      {% if trigger.entity_id is defined %}
        {% if trigger.entity_id == '' or trigger.entity_id == None %}
          {{ false }}
        {% else %}
          {{ true }}
        {% endif %}
      {% else %}
        {{ true }}
      {% endif %}
  
  # Skip if no control entities are configured
  - condition: template
    value_template: >-
      {{ primary_control_entity != 'none' }}
  
  # Don't trigger on attribute-only changes
  - condition: template
    value_template: >-
      {% if trigger.platform == 'state' and trigger.entity_id != 'sun.sun' %}
        {% if trigger.from_state and trigger.to_state %}
          {{ trigger.from_state.state != trigger.to_state.state }}
        {% else %}
          {{ true }}
        {% endif %}
      {% else %}
        {{ true }}
      {% endif %}

# Actions
action:
  # Update check notification
  - if:
      - condition: trigger
        id:
          - update_check
          - update_sensor_changed
      - condition: template
        value_template: "{{ update_available }}"
    then:
      - service: persistent_notification.create
        data:
          title: "Universal Lighting Blueprint Update Available!"
          message: >
            **{{ release_name }}**
            
            Version {{ latest_version }} is now available!
            
            Your version: {{ blueprint_version }}
            
            [View Release Notes]({{ release_url }})
          notification_id: "universal_lighting_update_{{ room_name | lower }}"
  
  # Check for active manual override (with conditional logging)
  - if:
      - condition: template
        value_template: >-
          {{ manual_override and not is_primary_trigger and
            not (control_mode == 'switch_and_lights' and trigger.entity_id == light_switch) }}
    then:
      - if:
          - condition: template
            value_template: "{{ enable_debug_logs }}"
        then:
          - service: system_log.write
            data:
              level: info
              message: >-
                [{{ room_name | upper }}] Manual override active - skipping automation
                │ Would have: {{ 'turned ON' if (is_dark and someone_present and not bed_occupied and not prevent_auto_on and not lights_on) else 'turned OFF' if (auto_would_turn_off and lights_on) else 'done nothing' }}
      - stop: "Manual override active"
  
  # Main automation logic with dynamic lighting
  - choose:
      # Manual Override Detection - User manually changed lights
      - conditions:
          - condition: template
            value_template: "{{ is_manual_change }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: warning
                  message: >-
                    ┌─ {{ room_name | upper }} MANUAL CHANGE DETECTED ────────────────
                    │ Action: Turned {{ 'ON' if user_turned_on else 'OFF' }}
                    │ Entity: {{ trigger.entity_id }}
                    │ Auto would: {{ 'turn ON' if auto_would_turn_on else 'turn OFF' if auto_would_turn_off else 'do nothing (prevented by daytime control)' if prevent_auto_on else 'do nothing' }}
                    │ Illuminance: {{ illuminance }}lux
                    │ Presence: {{ 'YES' if someone_present else 'NO' }}
                    └────────────────────────────────────────────────────────────────
          
          # Determine if override should be set or cleared
          - choose:
              # Set override - user action conflicts with automation
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ (user_turned_on and (not auto_would_turn_on or prevent_auto_on)) or
                         (user_turned_off and auto_would_turn_on and not prevent_auto_on) }}
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            [{{ room_name | upper }}] Manual override SET
                            │ Reason: Conflicts with automation
              
              # Clear override - user action matches automation intent
              - conditions:
                  - condition: template
                    value_template: >-
                      {% if has_bed_sensor and bed_occupied and not (enable_guest_mode and guest_ignore_bed) %}
                        {{ false }}
                      {% else %}
                        {{ (user_turned_on and auto_would_turn_on and not prevent_auto_on) or
                           (user_turned_off and auto_would_turn_off) }}
                      {% endif %}
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: "[{{ room_name | upper }}] Override cleared - action matches automation"
              
              # Clear override - user turned off in bright room
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_off and is_bright and someone_present }}"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: "[{{ room_name | upper }}] Override cleared - lights off in bright room"
              
              # Default case - set override for other manual changes
              - conditions:
                  - condition: template
                    value_template: >-
                      {% set auto_on_recent = false %}
                      {% if is_state(light_auto_on_helper, 'on') and user_turned_on %}
                        {% if states[light_auto_on_helper] and states[light_auto_on_helper].last_changed %}
                          {% set auto_on_changed = as_timestamp(states[light_auto_on_helper].last_changed, 0) %}
                          {% if auto_on_changed > 0 %}
                            {% set age = current_time - auto_on_changed %}
                            {% set auto_on_recent = age < 5 %}
                          {% endif %}
                        {% endif %}
                      {% endif %}
                      
                      {% set bed_auto_off = false %}
                      {% if user_turned_off and turn_off_when_bed_occupied and bed_occupied and not (enable_guest_mode and guest_ignore_bed) %}
                        {% set bed_auto_off = true %}
                      {% endif %}
                      
                      {% set threshold_gap = bright_threshold - dark_threshold %}
                      
                      {% set wants_dark_while_present = false %}
                      {% if not bed_auto_off %}
                        {% set wants_dark_while_present = user_turned_off and someone_present and not is_bright %}
                      {% endif %}
                      
                      {% set wants_light_when_not_dark = user_turned_on and not is_dark and someone_present %}
                      
                      {% set fighting_automation = false %}
                      {% if not bed_auto_off %}
                        {% set fighting_automation = user_turned_off and light_was_auto_on and someone_present %}
                      {% endif %}
                      
                      {% set extreme_override = false %}
                      {% if not bed_auto_off %}
                        {% set extreme_override = user_turned_off and is_extremely_dark and someone_present %}
                      {% endif %}
                      
                      {% set narrow_threshold = threshold_gap <= 10 %}
                      {% set middle_range_override = false %}
                      {% if not bed_auto_off %}
                        {% set middle_range_override = narrow_threshold and in_middle_range and someone_present %}
                      {% endif %}
                      
                      {% set bed_override = false %}
                      {% if has_bed_sensor and bed_occupied and not (enable_guest_mode and guest_ignore_bed) %}
                        {% set bed_override = user_turned_on %}
                      {% endif %}
                      
                      {{ not auto_on_recent and not bed_auto_off and (
                        wants_dark_while_present or
                        wants_light_when_not_dark or
                        fighting_automation or
                        extreme_override or
                        middle_range_override or
                        bed_override
                      ) }}
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            [{{ room_name | upper }}] Manual override SET
                            │ Reason: User preference
          
          # Clear auto-on flag
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          
          # Stop if override was set
          - condition: template
            value_template: "{{ not manual_override }}"
      
      # Clear Override if Conditions Met
      - conditions:
          - condition: template
            value_template: "{{ manual_override and override_should_clear }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: warning
                  message: >-
                    ┌─ {{ room_name | upper }} OVERRIDE CLEARED ──────────────────────────────────────
                    │ Reason: {{ override_clear_reason }}
                    │ Was active for: {{ override_active_minutes }} minutes
                    └────────────────────────────────────────────────────────────────
          
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ manual_override_helper }}"
      
      # Dynamic Lighting Adjustment - Update brightness/color when lights are on
      - conditions:
          - condition: template
            value_template: "{{ lights_on and not manual_override and dynamic_lighting_mode != 'disabled' }}"
          - condition: template
            value_template: "{{ brightness_needs_adjustment or is_sun_trigger }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    [{{ room_name | upper }}] Dynamic lighting adjustment
                    │ Mode: {{ dynamic_lighting_mode }}
                    │ Sun elevation: {{ sun_elevation }}°
                    │ Target brightness: {{ adjusted_brightness }}%
                    │ Color temp: {{ dynamic_color_temp }}K
                    │ Night light: {{ 'YES' if should_use_night_light else 'NO' }}
          
          # Apply dynamic lighting adjustments
          - choose:
              # Night light mode active
              - conditions:
                  - condition: template
                    value_template: "{{ should_use_night_light }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: >-
                        {% if has_night_lights %}
                          {{ night_light_entities }}
                        {% else %}
                          {{ light_entities }}
                        {% endif %}
                    data:
                      brightness_pct: "{{ night_light_brightness }}"
                      transition: "{{ night_light_transition }}"
                      color_temp_kelvin: >-
                        {% if not night_light_use_color %}
                          {{ night_light_color_temp }}
                        {% endif %}
                      rgb_color: >-
                        {% if night_light_use_color %}
                          {{ night_light_rgb_color }}
                        {% endif %}
              
              # RGB color mode
              - conditions:
                  - condition: template
                    value_template: "{{ enable_color_control and dynamic_lighting_mode == 'advanced' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light_entities }}"
                    data:
                      brightness_pct: "{{ adjusted_brightness }}"
                      transition: "{{ effective_fade_on_time }}"
                      rgb_color: "{{ dynamic_rgb_color }}"
              
              # Color temperature mode (default)
              - conditions:
                  - condition: template
                    value_template: "{{ enable_color_temperature }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light_entities }}"
                    data:
                      brightness_pct: "{{ adjusted_brightness }}"
                      transition: "{{ effective_fade_on_time }}"
                      color_temp_kelvin: "{{ dynamic_color_temp }}"
              
              # Brightness only mode
            default:
              - service: light.turn_on
                target:
                  entity_id: "{{ light_entities }}"
                data:
                  brightness_pct: "{{ adjusted_brightness }}"
                  transition: "{{ effective_fade_on_time }}"
      
      # Automatic control evaluation - ONLY run if no manual override and not a recent primary change
      - conditions:
          - condition: template
            value_template: "{{ not manual_override }}"
          - condition: template
            value_template: "{{ not primary_recently_changed }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    [{{ room_name | upper }}] Automatic control evaluating...
                    │ Someone present: {{ someone_present }}
                    │ Lights on: {{ lights_on }}
                    │ Would turn ON: {{ auto_would_turn_on }}
                    │ Would turn OFF: {{ auto_would_turn_off }}
                    │ Prevent auto-ON: {{ prevent_auto_on }}
                    │ Bed occupied: {{ bed_occupied }}
                    │ Should: {{ 'turn ON' if (auto_would_turn_on and not lights_on and not prevent_auto_on) else 'turn OFF' if (auto_would_turn_off and lights_on) else 'prevent auto-ON' if (prevent_auto_on and is_dark and someone_present and not lights_on) else 'do nothing' }}
          
          - choose:
              # Automatic Turn ON - Presence detected and dark (ONLY if not prevented by daytime control)
              - conditions:
                  - condition: template
                    value_template: "{{ not lights_on }}"
                  - condition: template
                    value_template: "{{ auto_would_turn_on }}"
                  - condition: template
                    value_template: "{{ not prevent_auto_on }}"
                sequence:
                  # Apply bed exit delay if needed
                  - if:
                      - condition: template
                        value_template: "{{ has_bed_sensor and not bed_occupied }}"
                      - condition: template
                        value_template: "{{ states[occupancy_state_helper] and states[occupancy_state_helper].last_changed }}"
                      - condition: template
                        value_template: >-
                          {% set occupancy_last_changed = as_timestamp(states[occupancy_state_helper].last_changed, 0) %}
                          {% set time_since_change = current_time - occupancy_last_changed %}
                          {{ time_since_change < bed_exit_delay_seconds }}
                    then:
                      - delay:
                          seconds: "{{ bed_exit_delay_seconds }}"
                      
                      # Recheck conditions after delay
                      - condition: template
                        value_template: "{{ not manual_override and auto_would_turn_on and not lights_on and not prevent_auto_on }}"
                  
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: warning
                          message: >-
                            ┌─ {{ room_name | upper }} LIGHTS TURNED ON ──────────────────────────────────────
                            │ Control Mode: {{ control_mode }}
                            │ Dynamic Mode: {{ dynamic_lighting_mode }}
                            │ Brightness: {{ adjusted_brightness }}%
                            │ Color Temp: {{ dynamic_color_temp }}K
                            │ Illuminance: {{ illuminance }} lux
                            │ Night Light: {{ 'YES' if should_use_night_light else 'NO' }}
                            │ Guest Mode: {{ 'YES' if enable_guest_mode else 'NO' }}
                            │ Bed Exit Delay: {{ bed_exit_delay_seconds }}s{% if has_bed_sensor and not bed_occupied %} (APPLIED ±5s){% endif %}
                            └────────────────────────────────────────────────────────────────
                  
                  # Set automation active flag
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ automation_active_helper }}"
                  
                  # Mark lights as auto-on
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ light_auto_on_helper }}"
                  
                  # Update last automation action
                  - service: input_datetime.set_datetime
                    target:
                      entity_id: "{{ last_automation_action_helper }}"
                    data:
                      datetime: "{{ now().isoformat() }}"
                  
                  # Turn on appropriate lights
                  - choose:
              # Night light mode
              - conditions:
                  - condition: template
                    value_template: "{{ should_use_night_light }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ night_light_active_helper }}"
                  
                  - service: light.turn_on
                    target:
                      entity_id: >-
                        {% if has_night_lights %}
                          {{ night_light_entities }}
                        {% else %}
                          {{ light_entities }}
                        {% endif %}
                    data:
                      brightness_pct: "{{ night_light_brightness }}"
                      transition: "{{ night_light_transition }}"
                      color_temp_kelvin: >-
                        {% if not night_light_use_color %}
                          {{ night_light_color_temp }}
                        {% endif %}
                      rgb_color: >-
                        {% if night_light_use_color %}
                          {{ night_light_rgb_color }}
                        {% endif %}
              
              # Normal lighting mode
            default:
              - service: input_text.set_value
                target:
                  entity_id: "{{ dynamic_mode_helper }}"
                data:
                  value: "{{ dynamic_lighting_mode }}"
              
              - choose:
                  # RGB mode
                  - conditions:
                      - condition: template
                        value_template: "{{ enable_color_control and dynamic_lighting_mode == 'advanced' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: "{{ light_entities }}"
                        data:
                          brightness_pct: "{{ adjusted_brightness }}"
                          transition: "{{ effective_fade_on_time }}"
                          rgb_color: "{{ dynamic_rgb_color }}"
                  
                  # Color temperature mode
                  - conditions:
                      - condition: template
                        value_template: "{{ enable_color_temperature }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: "{{ light_entities }}"
                        data:
                          brightness_pct: "{{ adjusted_brightness }}"
                          transition: "{{ effective_fade_on_time }}"
                          color_temp_kelvin: "{{ dynamic_color_temp }}"
                
                # Brightness only
                default:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light_entities }}"
                    data:
                      brightness_pct: "{{ adjusted_brightness }}"
                      transition: "{{ effective_fade_on_time }}"
              
                  # Turn on switch if needed
                  - if:
                      - condition: template
                        value_template: "{{ control_mode in ['switch_only', 'switch_and_lights'] and has_switch }}"
                    then:
                      - service: homeassistant.turn_on
                        target:
                          entity_id: "{{ light_switch }}"
                  
                  # Clear automation active flag
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ automation_active_helper }}"
              
      # Automatic Turn OFF - No presence or bed occupied
      - conditions:
          - condition: template
            value_template: "{{ not manual_override }}"
          - condition: template
            value_template: "{{ lights_on }}"
          - condition: template
            value_template: "{{ auto_would_turn_off }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: warning
                  message: >-
                    ┌─ {{ room_name | upper }} LIGHTS TURNED OFF ──────────────────────────────────────
                    │ Control Mode: {{ control_mode }}
                    │ Reason: {% if turn_off_when_bed_occupied and bed_occupied and not (enable_guest_mode and guest_ignore_bed) %}Bed occupied{% else %}Room vacant{% endif %}
                    │ Vacancy Time: {{ room_vacant_minutes }} minutes
                    │ Fade Off: {{ effective_fade_off_time }}s
                    │ Bed Entry Delay: {{ bed_entry_delay_seconds }}s{% if is_bed_trigger and bed_occupied_raw %} (APPLIED ±5s){% endif %}
                    └────────────────────────────────────────────────────────────────
          
          # Wait for vacancy timeout (with bed entry delay if applicable)
          - if:
              - condition: template
                value_template: "{{ bed_occupied and turn_off_when_bed_occupied }}"
            then:
              - delay:
                  seconds: "{{ bed_entry_delay_seconds }}"
            else:
              - delay:
                  minutes: "{{ vacancy_timeout_minutes }}"
          
          # Recheck conditions after delay
          - if:
              - condition: template
                value_template: "{{ not manual_override and lights_on and auto_would_turn_off }}"
            then:
              # Set automation active flag
              - service: input_boolean.turn_on
                target:
                  entity_id: "{{ automation_active_helper }}"
              
              # Update last automation action
              - service: input_datetime.set_datetime
                target:
                  entity_id: "{{ last_automation_action_helper }}"
                data:
                  datetime: "{{ now().isoformat() }}"
              
              # Turn off lights with fade
              - service: light.turn_off
                target:
                  entity_id: "{{ light_entities }}"
                data:
                  transition: "{{ effective_fade_off_time }}"
              
              # Turn off night lights if active
              - if:
                  - condition: template
                    value_template: "{{ has_night_lights }}"
                then:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ night_light_entities }}"
                    data:
                      transition: "{{ effective_fade_off_time }}"
              
              # Turn off switch if needed
              - if:
                  - condition: template
                    value_template: "{{ control_mode in ['switch_only', 'switch_and_lights'] and has_switch }}"
                then:
                  - service: homeassistant.turn_off
                    target:
                      entity_id: "{{ light_switch }}"
              
              # Clear flags
              - service: input_boolean.turn_off
                target:
                  entity_id:
                    - "{{ light_auto_on_helper }}"
                    - "{{ automation_active_helper }}"
                    - "{{ night_light_active_helper }}"
      
      # Log when prevented from turning on
      - conditions:
          - condition: template
            value_template: "{{ prevent_auto_on and is_dark and someone_present and not bed_occupied and not lights_on }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    [{{ room_name | upper }}] AUTO-ON PREVENTED
                    │ Reason: {% if away_mode_active %}Block when away (nobody home during daytime){% elif no_daytime_lights_active %}Always block daytime mode{% else %}Unknown{% endif %}
                    │ Would have turned on: Dark ({{ illuminance }}lux) and occupied
      
      # Update occupancy state helper
      - conditions:
          - condition: template
            value_template: "{{ is_pir_trigger or is_mmwave_trigger }}"
        sequence:
          - service: input_boolean.turn_{{ 'on' if someone_present else 'off' }}
            target:
              entity_id: "{{ occupancy_state_helper }}"
      
      # Update illuminance history for averaging
      - conditions:
          - condition: template
            value_template: "{{ is_illuminance_trigger and enable_illuminance_averaging }}"
        sequence:
          - service: input_text.set_value
            target:
              entity_id: "{{ illuminance_history_helper }}"
            data:
              value: >-
                {% set current = illuminance_raw | string %}
                {% set history = illuminance_history_raw | string %}
                {% if history == '[]' or history == '' %}
                  [{{ current }}]
                {% else %}
                  {% set values = history[1:-1].split(',') | select | list %}
                  {% set values = values[-9:] + [current] %}
                  [{{ values | join(',') }}]
                {% endif %}
    
    # Decision summary logging only
    default:
      - if:
          - condition: template
            value_template: "{{ enable_debug_logs and is_periodic_trigger }}"
        then:
          - service: system_log.write
            data:
              level: info
              message: >-
                [{{ room_name | upper }}] PERIODIC CHECK
                ├─ Room Presence: {{ 'YES' if someone_present else 'NO' }}
                ├─ Home Presence: {{ 'SOMEONE HOME' if someone_home else 'NOBODY HOME' }}
                ├─ Daytime: {{ 'YES' if is_daytime_final else 'NO' }}
                ├─ Light Level: {{ illuminance }}lux ({{ 'Dark' if is_dark else 'Bright' if is_bright else 'Medium' }})
                ├─ Dynamic Mode: {{ dynamic_lighting_mode }}
                ├─ Sun Elevation: {{ sun_elevation }}°
                ├─ Daytime Prevention: {{ 'ACTIVE' if prevent_auto_on else 'INACTIVE' }}
                ├─ Override: {{ 'ACTIVE' if manual_override else 'INACTIVE' }}
                ├─ Night Light: {{ 'ACTIVE' if should_use_night_light else 'INACTIVE' }}
                ├─ Bed Status: {% if has_bed_sensor %}{{ 'OCCUPIED' if bed_occupied else 'EMPTY' }}{% else %}N/A{% endif %}
                └─ Performance: {% if ((now().timestamp() - start_time) * 1000) < 100 %}⚡ Excellent{% elif ((now().timestamp() - start_time) * 1000) < 500 %}✔ Good{% else %}⚠️ Slow{% endif %}

# Mode - Restart to handle rapid changes
mode: restart
max_exceeded: silent
      